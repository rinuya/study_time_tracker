import Head from 'next/head'
import { useState, useRef } from "react"
import { useRouter } from 'next/router';
import Layout from '../components/Layout';

export default function Signin() {

    const router = useRouter();
    const [signupFailed, setSignupFailed] = useState<boolean>(false);
    const emailRef = useRef<HTMLInputElement>(null);
    const usernameRef = useRef<HTMLInputElement>(null);
    const passwordRef = useRef<HTMLInputElement>(null);
    const secretRef = useRef<HTMLInputElement>(null);

    async function hanldeSubmit(event:any) {
        const username = usernameRef.current ? usernameRef.current.value : "";
        const email = emailRef.current ? emailRef.current.value : "";
        const password = passwordRef.current ? passwordRef.current.value : "";
        const secret = secretRef.current ? secretRef.current.value : "";

        if (email && (email.includes('@')) && password && secret && username) {
            let response = await fetch('/api/auth/signup', {
                method: 'POST',
                body: JSON.stringify({ email: email, password: password, username: username, secret: secret}),
                headers: {
                  'Content-Type': 'application/json',
                },
            });
            if (response.status == 200) {
                router.replace('/signin');
            } else {
                setSignupFailed(true);        
            }
        }
    }

    return (
        <>
            <Head>
                <title>Signin</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Layout>
                <main className="flex justify-center pt-16">
                    <div className="flex flex-col bg-white md:p-6 lg:p-12 p-4">
                        <h1 className="sm:text-4xl text-3xl font-medium pb-4">SignUp</h1>
                        <p className='max-w-[45ch] text-gray-700 text-sm pb-6'>Please not that this is not a &apos;public&apos; website, you will need to know the secret in order to signup</p>
                        {signupFailed ? <p className='text-red-600 pb-6'>Signup failed</p> : ""}
                        <div className="relative z-0 mb-6">
                            <input ref={emailRef} type="email" name="email" className="peer block w-full appearance-none border-0 border-b border-gray-500 bg-transparent py-2.5 px-0 text-sm text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0" placeholder=" " />
                            <label htmlFor='email' className="absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-blue-600 peer-focus:dark:text-blue-500">E-Mail</label>
                        </div>
                        <div className="relative z-0 mb-6">
                            <input ref={usernameRef} type="text" name="username" className="peer block w-full appearance-none border-0 border-b border-gray-500 bg-transparent py-2.5 px-0 text-sm text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0" placeholder=" " />
                            <label htmlFor='username' className="absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-blue-600 peer-focus:dark:text-blue-500">Username</label>
                        </div>
                        <div className="relative z-0 mb-6">
                            <input ref={passwordRef} type="password" name="password" className="peer block w-full appearance-none border-0 border-b border-gray-500 bg-transparent py-2.5 px-0 text-sm text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0" placeholder=" " />
                            <label htmlFor='password' className="absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-blue-600 peer-focus:dark:text-blue-500">Password</label>
                        </div>
                        <div className="relative z-0 mb-6">
                            <input ref={secretRef} type="text" name="secret" className="peer block w-full appearance-none border-0 border-b border-gray-500 bg-transparent py-2.5 px-0 text-sm text-gray-900 focus:border-blue-600 focus:outline-none focus:ring-0" placeholder=" " />
                            <label htmlFor='secret' className="absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-blue-600 peer-focus:dark:text-blue-500">Secret</label>
                        </div>       
                        <button onClick={hanldeSubmit} className="mt-5 rounded-md bg-black hover:bg-gray-800 focus:bg-gray-800 px-10 py-2 text-white leading-tight shadow-md hover:shadow-lg focus:shadow-lg focus:outline-none focus:ring-0 active:shadow-lg transition duration-150 ease-in-out">Submit</button>
                    </div>
                </main>
            </Layout>
        </>
    )
}
